Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My security group
      GroupName: r-replace-security-group
  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: yes
      CacheNodeType: cache.t2.micro
      ClusterName: redisCluster
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt
          - SecurityGroup
          - GroupId
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  BoardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: coordinate
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: coordinate
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ConnectHandlerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ConnectHandlerServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: ConnectHandlerServiceRoleDefaultPolicy
      Roles:
        - Ref: ConnectHandlerServiceRole
  ConnectHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
                const ddb = new AWS.DynamoDB.DocumentClient();
                exports.handler = async function (event, context) {
                  console.log(JSON.stringify(event));
                  try {
                    await ddb
                      .put({
                        TableName: process.env.table,
                        Item: {
                          connectionId: event.requestContext.connectionId,
                        },
                      })
                      .promise();
                  } catch (err) {
                    return {
                      statusCode: 500,
                      message: `fail to conncet to connection table with error: ${err} with context: ${JSON.stringify(event)}`,
                    };
                  }
                  return {
                    statusCode: 200,
                  };
                };
      Role:
        Fn::GetAtt:
          - ConnectHandlerServiceRole
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - ConnectHandlerServiceRoleDefaultPolicy
      - ConnectHandlerServiceRole
  DisconnectHandlerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  DisconnectHandlerServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:Scan
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: DisconnectHandlerServiceRoleDefaultPolicy
      Roles:
        - Ref: DisconnectHandlerServiceRole
  DisconnectHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
                const ddb = new AWS.DynamoDB.DocumentClient();
                
                exports.handler = async function (event, context) {
                  await ddb
                    .delete({
                      TableName: process.env.table,
                      Key: {
                        connectionId: event.requestContext.connectionId,
                      },
                    })
                    .promise();
                  return {
                    statusCode: 200,
                  };
                };
      Role:
        Fn::GetAtt:
          - DisconnectHandlerServiceRole
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - DisconnectHandlerServiceRoleDefaultPolicy
      - DisconnectHandlerServiceRole
  SendMessageHandlerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  SendMessageHandlerServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable
                  - Arn
              - Fn::GetAtt:
                  - BoardTable
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: SendMessageHandlerServiceRoleDefaultPolicy
      Roles:
        - Ref: SendMessageHandlerServiceRole
  SendMessageHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
            const AWS = require('aws-sdk');
            const ddb = new AWS.DynamoDB.DocumentClient();
            const redis = require("redis");
            
            exports.handler = async function (event, context) {
              const message = JSON.parse(event.body).message;
              try {
                await ddb
                  .put({
                    TableName: process.env.boardTable,
                    Item: {
                      coordinate: `${message.x},${message.y}`,
                      color: message.color,
                      user: message.user,
                      time: Date.now(),
                    },
                  })
                  .promise();
              } catch (err) {
                return {
                  statusCode: 500,
                  message: `fail to connect board db with error: ${err}`
                };
              }
            
              const redisClient = redis.createClient({
                host: process.env.redisClusterAddr,
                port: process.env.redisClusterPort,
              });
            
              try {
                // Check if the board exists
                const boardExists = await new Promise((resolve, reject) => {
                  redisClient.exists('board', (err, data) => {
                    if (err) reject(err);
                    else resolve(data);
                  });
                });
            
                // If the board doesn't exist, create a white board
                if (!boardExists) {
            
                  const whitePixel = "FFFFFF";
                  const totalPixels = 1000 * 1000;
                  const whiteBoard = whitePixel.repeat(totalPixels);
            
                  await new Promise((resolve, reject) => {
                    redisClient.set('board', whiteBoard, (err, data) => {
                      if (err) reject(err);
                      else resolve(data);
                    });
                  });
                }
                // Get rid of the # in the color
                let color = message.color.slice(1);
                const offset = (message.x + message.y * 1000) * 6;
            
                // Set the color at the offset
                await new Promise((resolve, reject) => {
                  redisClient.setRange("board", offset, color, (err, data) => {
                    if (err) reject(err);
                    resolve(data);
                  });
                });
            
              } catch (err) {
                return {
                  statusCode: 500,
                  message: `fail to connect redis cache with error: ${err}`
                };
              }
            
              let connections;
              try {
                connections = await ddb.scan({ TableName: process.env.table }).promise();
              } catch (err) {
                return {
                  statusCode: 500,
                  message: `fail to connect connection db with error: ${err}`
                };
              }
              const callbackAPI = new AWS.ApiGatewayManagementApi({
                apiVersion: '2018-11-29',
                endpoint:
                  event.requestContext.domainName + '/' + event.requestContext.stage,
              });
            
              const sendMessages = connections.Items.map(async ({ connectionId }) => {
                try {
                  await callbackAPI
                    .postToConnection({ ConnectionId: connectionId, Data: JSON.stringify(message) })
                    .promise();
                } catch (e) {
                  console.log(e);
                }
              });
            
              try {
                await Promise.all(sendMessages);
              } catch (e) {
                console.log(e);
                return {
                  statusCode: 500,
                  message: `cant send message with error: ${err}`
                };
              }
            
              return { statusCode: 200 };
            };
      Role:
        Fn::GetAtt:
          - SendMessageHandlerServiceRole
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable
          boardTable:
            Ref: BoardTable
          redisClusterAddr: !GetAtt ElasticacheCluster.RedisEndpoint.Address
          redisClusterPort: !GetAtt ElasticacheCluster.RedisEndpoint.Port
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - SendMessageHandlerServiceRoleDefaultPolicy
      - SendMessageHandlerServiceRole
  DefaultHandlerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  DefaultHandlerServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - BoardTable
                  - Arn
              - Ref: AWS::NoValue
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:execute-api:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - Ref: WebsocketApi
                  - /production/POST/@connections/*
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:execute-api:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - Ref: WebsocketApi
                  - /production/GET/@connections/*
        Version: "2012-10-17"
      PolicyName: DefaultHandlerServiceRoleDefaultPolicy
      Roles:
        - Ref: DefaultHandlerServiceRole
  DefaultHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

                exports.handler = async function (event, context) {
                  let connectionInfo;
                  let connectionId = event.requestContext.connectionId;
                
                  const callbackAPI = new AWS.ApiGatewayManagementApi({
                    apiVersion: '2018-11-29',
                    endpoint:
                      event.requestContext.domainName + '/' + event.requestContext.stage,
                  });
                
                  try {
                    connectionInfo = await callbackAPI
                      .getConnection({ ConnectionId: event.requestContext.connectionId })
                      .promise();
                  } catch (e) {
                    console.log(e);
                  }
                
                  connectionInfo.connectionID = connectionId;

                  const ddb = new AWS.DynamoDB.DocumentClient();
                  let board;
                  try {
                    board = await ddb.scan({ TableName: process.env.boardTable }).promise();
                  } catch (err) {
                    return {
                      statusCode: 500,
                      message: `fail to conncet to board table with error: ${err}`
                    };
                  }
                
                  await callbackAPI
                    .postToConnection({
                      ConnectionId: event.requestContext.connectionId,
                      Data: JSON.stringify(board),
                    })
                    .promise();
                
                  return {
                    statusCode: 200,
                  };
                };
      Role:
        Fn::GetAtt:
          - DefaultHandlerServiceRole
          - Arn
      Environment:
        Variables:
          boardTable:
            Ref: BoardTable
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - DefaultHandlerServiceRoleDefaultPolicy
      - DefaultHandlerServiceRole
  WebsocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: r/place
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebsocketconnectRouteConnectIntegrationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ConnectHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebsocketApi
            - /*/*$connect
  WebsocketApiconnectRouteConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ConnectHandler
                - Arn
            - /invocations
  WebsocketApiconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebsocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebsocketApiconnectRouteConnectIntegration
  WebsocketApidisconnectRouteDisconnectIntegrationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - DisconnectHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebsocketApi
            - /*/*$disconnect
  WebsocketApidisconnectRouteDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - DisconnectHandler
                - Arn
            - /invocations
  WebsocketApidisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebsocketApidisconnectRouteDisconnectIntegration
  WebsocketApidefaultRouteDefaultIntegrationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - DefaultHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebsocketApi
            - /*/*$default
  WebsocketApidefaultRouteDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - DefaultHandler
                - Arn
            - /invocations
  WebsocketApidefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebsocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebsocketApidefaultRouteDefaultIntegration
  WebsocketApisendmessageRouteMessageHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SendMessageHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebsocketApi
            - /*/*sendmessage
  WebsocketApisendmessageRouteMessageHandler:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - SendMessageHandler
                - Arn
            - /invocations
  WebsocketApisendmessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebsocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebsocketApisendmessageRouteMessageHandler
  production:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebsocketApi
      StageName: production
      AutoDeploy: true
  manageConnections:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:execute-api:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - "*/*/POST/@connections/*"
        Version: "2012-10-17"
      PolicyName: manageConnections
      Roles:
        - Ref: SendMessageHandlerServiceRole